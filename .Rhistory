}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
test<-makeCacheMatrix(matr)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# if a matrix is called without a method
m<- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
test<-makeCacheMatrix(matr)
test
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# if a matrix is called without a method
m<- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
vect<-c(1:9)
test2<-makeVector(vect)
test2
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# if a matrix is called without a method
m<- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(matr)
cacheSolve(test)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# if a matrix is called without a method
m<- NULL
set <- function(y){
x<<-y
m<<-NULL
}
get <- function() x
setinv <- function(inv) m <<- inv
getinv <- function() m
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinv()
if(!is.null(m))
{
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinv(m)
m
}
cacheSolve(matr)
test<-makeCacheMatrix(matr)
cacheSolve(test)
install.packages(magic)
install.packages("magic)
install.packages("magic")
install.packages("magic")
library(magic)
library(magic)
matr<-magic(5)
test<-makeCacheMatrix(matr)
res<-cacheSolve(test)
res
res$getinv
res$getinv()
test$getinv()
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rbinom(10, 10, 0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
?system.time()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1<-rnorm(10)
x2<-rnorm(20)
install.packages(quantmod)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
print(p)
print.trellis()
print.trellis()
trellis.par.set()
?trellis.par.set()
splom()
?splom()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
trellis.par.set()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
trellis.par.set()
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
trellis.par.set(p)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
install.packages("ggplot2")
library(ggplot2)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
ggplot(movies,aes(votes,rating))
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(logpm25, NocturnalSympt, data = maacs)
ggplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg)
ggplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg, smooth="loess")
qplot(displ,hwy,data=mpg)
qplot(displ,hwy,data=mpg,panel=panel.loess)
qplot(displ,hwy,data=mpg) +geom.smooth()
qplot(displ,hwy,data=mpg) +stats_smooth("loess")
qplot(displ,hwy,data=mpg, smooth="loess")
qplot(displ,hwy,data=mpg,panel=panel.loess)
qplot(displ,hwy,data=mpg, smooth="")
?qplot
qplot(displ,hwy,data=mpg) +stat_smooth("loess")
qplot(displ,hwy,data=mpg) +smooth("loess")
qplot(displ,hwy,data=mpg) +smooth()
qplot(displ,hwy,data=mpg) +smooth("loess")
qplot(displ,hwy,data=mpg,smooth("loess")
qplot(displ,hwy,data=mpg,smooth("loess"))
qplot(displ,hwy,data=mpg,smooth("loess"))
qplot(displ,hwy,data=mpg,smooth="loess")
qplot(displ,hwy,data=mpg) +geom_smooth()
qplot(displ,hwy,data=mpg) +geom_smooth(method="x")
qplot(displ,hwy,data=mpg) +geom_smooth(method=x)
qplot(displ,hwy,data=mpg) +geom_smooth()
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
install.packages(knitr)
install.packages("knitr")
library(knitr)
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
Title
========================================================
This is an R Markdown document. Markdown is a simple formatting syntax for authoring web pages (click the **Help** toolbar button for more details on using R Markdown).
When you click the **Knit HTML** button a web page will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r highlight=TRUE}
summary(cars)
```
You can also embed plots, for example:
```{r fig.width=7, fig.height=6}
plot(cars)
```
setwd("C:/Users/Asus/RepData_PeerAssessment1")
setwd("C:/Users/Asus/RepData_PeerAssessment1")
file<-read.csv("activity.csv")
library(xtable)
xt<-xtable(file)
print(xt,type="html")
install.packages("xtable")
file<-read.csv("activity.csv")
library(xtable)
xt<-xtable(file)
print(xt,type="html")
head(file)
file$Date
View(file)
file$date
as.Date(file$date)
class(file$date)
class(file$date[1])
View(file)
?split
per_day<-split(file,file$date)
per_day
file2<-file[complete.cases(file),]
per_day<-split(file2,file$date)
per_day
per_day
per_day[1]
library(lattice)
xyplot(steps ~ date,data=file)
histogram(steps ~ date, data=file)
histogram(steps ~ date, data=file2)
histogram(steps ~ date, data=file2)
per_day
hist(per_day)
hist(per_day$1)
per_day$1
per_day$factor
per_day
histogram(steps ~ interval|date, data=file2)
?sum
file[, sum(steps), by="interval,date"]
file[, sum(steps), by="date"]
df<-as.data.table(file)
as.table(file)
as.data.table
?as.data.table
?as.table
class(file)
dt<-data.table(file)
library("data.table")
install.packages("data.table")
install.packages("data.table")
library("data.table")
dt<-data.table(file)
dt[, sum(steps), by="interval,date"]
dt[, sum(steps), by="date"]
dt<-data.table(file2)
dt[, sum(steps), by="date"]
per_day<-dt[, sum(steps), by="date"]
historam(V1~date,data=per_day)
histogram(V1~date,data=per_day)
per_day
per_day$V1
histogram(date~V1,data=per_day)
histogram(v1~DATE,data=per_day)
histogram(v1~date,data=per_day)
histogram(V1~date,data=per_day)
histogram(V1,data=per_day)
per_day
hist(per_day$V1)
hist(per_day$date)
hist(per_day$V1,xlabs=per_day$date)
hist(per_day$V1,breaks=per_day$date)
hist(per_day$V1)
histogram(V1|date,data=dt)
histogram(V1|date,data=per_day)
per_day
histogram(date|V1,data=per_day)
histogram(V1|date,data=per_day)
histogram(date~V1|date,data=per_day)
histogram(date~V1,data=per_day)
histogram(V1~date,data=per_day)
plot(per_day$V1,per_day$date)
hist(per_day$V1)
per_day
hist(per_day$date)
as.numeric(per_day$date)
histogram(V1,as.numeric(date),data=per_day)
histogram(V1~as.numeric(date),data=per_day)
?histogram
histogram(V1~as.numeric(date),data=per_day,n=60)
histogram(V1~as.numeric(date),data=per_day,n=53)
histogram(V1~as.numeric(date),data=per_day,n=53)
histogram(date~V1)
histogram(date~V1,data=per_day)
histogram(date~V1,data=per_day,n=53)
View(dt)
dt[, sum(steps), by="interval,date"]
?colnames
View(per_day)
View(per_day)
hist(table(per_day))
hist(dt)
per_day
table(per_day)
histogram(~V1,data=per_day)
histogram(date~V1,data=per_day)
histogram(date~V1,data=per_day)
histogram(V1~date,data=per_day)
histogram(set.seed(100)~date,data=per_day)
set.seed(1)
file
is.na(file)
file2[is.na(file)]<-0
file2$steps[is.na(file$steps)]<-0
file2[is.na(file)]<-0
per_day
per_step
?order
order(per_day)
per_day
per_day[order(per_day,decreasing=T),]
per_day[order(per_day$V1,decreasing=T),]
sapply(file, function(x) sum(is.na(x)))
?mean
View(per_day)
View(per_day)
new_per_day
f<-factor(f,labels=c("weekday","weekend"))
f<-factor(labels=c("weekday","weekend"))
f <- factor(f, labels = c("Group 1", "Group 2"))
f <- factor(file$date, labels = c("Group 1", "Group 2"))
library(lattice)
<- rep(0:1, each = 50)
f <- factor(f, labels = c("Group 1", "Group 2"))
f<- rep(0:1, each = 50)
f <- factor(f, labels = c("Group 1", "Group 2"))
file$date
weekdays()
?weekdays
weekdays(file$date)
weekdays(file$date,abbreviate=T)
dt
weekdays(dt[,2])
weekdays(2012-11-29)
weekdays("2012-11-29")
weekdays("as.date(2012-11-29)")
dt
dt[2]
dt[2,2]
dt$date
dt$date[3]
weekdays(dt$date)
dt$day<-as.POSIXlt(dt$date)$wday
dt$day
dt
length(dt)
length(dt[1])
length(dt[,1])
length(dt$day)
View(dt)
for (i in (1:length(dt$day))
{
if (dt$day==0 |dt$day==6) dt$day2<-"weekend" else
{
dt$day2="weekday"
}
}
head(dt)
View(dt)
for (i in (1:length(dt$day))
{
if (dt[i,4]==0 |dt[i,4]]==6) dt[i,"day2"]<-"weekend" else
{
dt[i,"day2"]="weekday"
}
}
head(dt)
View(dt)
library(lattice)
xyplot(steps~interval|day,data=dt)
xyplot(steps~interval|day2,data=dt)
xyplot(steps~interval|day2,data=dt,type="l")
View(dt)
xyplot(steps~interval|day2,data=dt,type="l",layout=c(1,2))
xyplot(steps~interval|day2,data=dt,type="l",layout=c(1,2))
xyplot(steps~interval|day2,data=dt,type="l",layout=c(2,1))
dt$day2
dt$day
dt[1,4]
1>2 | 2>3
1>2 || 2>3
1>2 || 3>2
1>2 | 3>2
View(dt)
View(dt)
dt[9990]
dt$day
dt[8716]
if (dt[8716,4]==0 |dt[8716,4]==6)
{
dt[8716,"day2"]<-"weekend"
}
dt[8716]
dt[8716,4]
dt[8716]
dt[8716,"day"]
dt[4]
dt[4][4]
dt[4]$day
View(dt)
dt$day2
dt[8716]$day
dt[8716]$day2
if dt[8716]$day==6 dt[8716]$day2="weekend"
if (dt[8716]$day==6) dt[8716]$day2="weekend"
dt[8716]$day2
